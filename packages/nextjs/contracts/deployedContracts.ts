/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  31337: {
    Diamond: {
      address: "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
      abi: [
        {
          inputs: [
            {
              components: [
                {
                  internalType: "address",
                  name: "facetAddress",
                  type: "address",
                },
                {
                  internalType: "enum IDiamond.FacetCutAction",
                  name: "action",
                  type: "uint8",
                },
                {
                  internalType: "bytes4[]",
                  name: "functionSelectors",
                  type: "bytes4[]",
                },
              ],
              internalType: "struct IDiamond.FacetCut[]",
              name: "_diamondCut",
              type: "tuple[]",
            },
            {
              components: [
                {
                  internalType: "address",
                  name: "owner",
                  type: "address",
                },
                {
                  internalType: "address",
                  name: "init",
                  type: "address",
                },
                {
                  internalType: "bytes",
                  name: "initCalldata",
                  type: "bytes",
                },
              ],
              internalType: "struct DiamondArgs",
              name: "_args",
              type: "tuple",
            },
          ],
          stateMutability: "payable",
          type: "constructor",
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "_selector",
              type: "bytes4",
            },
          ],
          name: "CannotAddFunctionToDiamondThatAlreadyExists",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "bytes4[]",
              name: "_selectors",
              type: "bytes4[]",
            },
          ],
          name: "CannotAddSelectorsToZeroAddress",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "_selector",
              type: "bytes4",
            },
          ],
          name: "CannotRemoveFunctionThatDoesNotExist",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "_selector",
              type: "bytes4",
            },
          ],
          name: "CannotRemoveImmutableFunction",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "_selector",
              type: "bytes4",
            },
          ],
          name: "CannotReplaceFunctionThatDoesNotExists",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "_selector",
              type: "bytes4",
            },
          ],
          name: "CannotReplaceFunctionWithTheSameFunctionFromTheSameFacet",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "bytes4[]",
              name: "_selectors",
              type: "bytes4[]",
            },
          ],
          name: "CannotReplaceFunctionsFromFacetWithZeroAddress",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "_selector",
              type: "bytes4",
            },
          ],
          name: "CannotReplaceImmutableFunction",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "_functionSelector",
              type: "bytes4",
            },
          ],
          name: "FunctionNotFound",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "uint8",
              name: "_action",
              type: "uint8",
            },
          ],
          name: "IncorrectFacetCutAction",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_initializationContractAddress",
              type: "address",
            },
            {
              internalType: "bytes",
              name: "_calldata",
              type: "bytes",
            },
          ],
          name: "InitializationFunctionReverted",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_contractAddress",
              type: "address",
            },
            {
              internalType: "string",
              name: "_message",
              type: "string",
            },
          ],
          name: "NoBytecodeAtAddress",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_facetAddress",
              type: "address",
            },
          ],
          name: "NoSelectorsProvidedForFacetForCut",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_facetAddress",
              type: "address",
            },
          ],
          name: "RemoveFacetAddressMustBeZeroAddress",
          type: "error",
        },
        {
          stateMutability: "payable",
          type: "fallback",
        },
        {
          stateMutability: "payable",
          type: "receive",
        },
      ],
      inheritedFunctions: {},
    },
    YourContract: {
      address: "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "_owner",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "greetingSetter",
              type: "address",
            },
            {
              indexed: false,
              internalType: "string",
              name: "newGreeting",
              type: "string",
            },
            {
              indexed: false,
              internalType: "bool",
              name: "premium",
              type: "bool",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256",
            },
          ],
          name: "GreetingChange",
          type: "event",
        },
        {
          inputs: [],
          name: "greeting",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "owner",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "premium",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "_newGreeting",
              type: "string",
            },
          ],
          name: "setGreeting",
          outputs: [],
          stateMutability: "payable",
          type: "function",
        },
        {
          inputs: [],
          name: "totalCounter",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          name: "userGreetingCounter",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "withdraw",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          stateMutability: "payable",
          type: "receive",
        },
      ],
      inheritedFunctions: {},
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
